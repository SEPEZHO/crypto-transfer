import React, { useEffect, useState } from "react";
import { Button } from "antd";
import Web3 from "web3";

import Form from "../Form/";

// –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä—è–º—É—é –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ –º–∞–∏–Ω–Ω–µ—Ç—É –µ—Å–ª–∏ –Ω–∞–¥–æ
// const web3 = new Web3(new Web3.providers.HttpProvider("http://127.0.0.1:8545"))

const Main = () => {
  const [user, setUser] = useState({ text: "", error: true });

  const getUserData = async () => {
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –ª–∏ –º–µ—Ç–∞–º–∞—Å–∫ (–æ–Ω –≤—à–∏–≤–∞–µ—Ç –º–µ—Ç–æ–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∏–º)
    if (window.ethereum) {
      try {
        // –∫–æ–Ω–Ω–µ–∫—Ç–∏–º—Å—è –∫ –º–µ—Ç–∞–º–∞—Å–∫
        await window.ethereum.enable();
        const web3 = new Web3(window.ethereum);
        // –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∫–æ—à–µ–ª—å–∫–∏
        const acc = await web3.eth.getAccounts();
        // –ø–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ (—É –º–µ—Ç–∞–º–∞—Å–∫ –æ–Ω 1)
        let balance = await web3.eth.getBalance(acc[0], (e, r) => (e ? 0 : r));
        // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Wei –≤ —ç—Ñ–∏—Ä (1 Wei —ç—Ç–æ 0,000000000000000001 ETH)
        balance = web3.utils.fromWei(balance, "ether");
        setUser({ text: acc[0], balance: balance, error: false });
      } catch (e) {
        // –ï—Å–ª–∏ —é–∑–µ—Ä –º—É–¥–∞–∫, —Ç–æ –ø–æ –æ—à–∏–±–∫–∞–º (e) –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –æ –µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è—Ö
        if (e.code === -32002) {
          setUser({ text: "‚ö†Ô∏è Close previus tab", error: true });
        } else if (e.code === 4001) {
          setUser({
            text: "‚ö†Ô∏è U closed previus tab. Retry now :)",
            error: true,
          });
        } else {
          setUser({ text: "‚ö†Ô∏è Something went wrong. Retry :)", error: true });
        }
      }
    } else {
      setUser({ text: "‚ö†Ô∏è You have to install MetaMask !", error: true });
    }
  };

  useEffect(getUserData, []);

  return (
    <div className="MainContainer">
      {user.error && (
        <div>
          <p>üîó Connect wallet!</p>
          <p>{user.text}</p>
          <Button type="dashed" onClick={getUserData}>
            Connect
          </Button>
        </div>
      )}
      {!user.error && <Form {...user} getUserData={getUserData} />}
    </div>
  );
};

export default Main;
